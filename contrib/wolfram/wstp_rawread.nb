(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     18255,        413]
NotebookOptionsPosition[     16264,        372]
NotebookOutlinePosition[     16693,        390]
CellTagsIndexPosition[     16650,        387]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "QtPlatz Advanced Filesystem\n",
 StyleBox["Raw spectral data access", "Subtitle"]
}], "Title",
 CellChangeTimes->{{3.7936617259885073`*^9, 3.793661727554058*^9}, {
  3.7936617765694637`*^9, 3.7936618402785263`*^9}, {3.793662762805703*^9, 
  3.793662775058014*^9}, {3.793726497210135*^9, 
  3.793726516854422*^9}},ExpressionUUID->"80496342-67c5-48a1-99cb-\
f3242b6e0308"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "SetDirectory", "[", 
   "\"\</Users/toshi/src/build-Darwin-i386/qtplatz.release/bin/qtplatz.app/\
Library/Wolfram\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"link", "=", 
   RowBox[{"Install", "[", "\"\<ws_adprocessor.bin\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<DatabaseLink`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"JDBCDrivers", "[", "\"\<SQLite\>\"", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.79359965314954*^9, 3.7935996531525183`*^9}, {
   3.793599825832704*^9, 3.7935998263176317`*^9}, 3.793600152705619*^9, 
   3.793601552719277*^9, {3.7936017610174294`*^9, 3.793601777297821*^9}, {
   3.793602032563635*^9, 3.7936020442329187`*^9}, {3.793661741546611*^9, 
   3.793661764131474*^9}},ExpressionUUID->"8047be15-27c5-4339-9b5d-\
8a721755f01f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "name", " ", "=", " ", 
   "\"\</Users/toshi/data/z440/2020-02-27/HCOONa_0002.adfs\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"file", " ", "=", " ", 
   RowBox[{"adFileOpen", "[", "name", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.793599670436405*^9, 3.793599674955967*^9}, {
   3.793599724121049*^9, 3.7935997907116947`*^9}, {3.7936000776698723`*^9, 
   3.79360008403583*^9}, {3.7936002363277807`*^9, 3.7936002378823843`*^9}, {
   3.793601618340765*^9, 3.7936016471224823`*^9}, 3.793601696083284*^9, {
   3.793601788780629*^9, 3.793601820996324*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"61f617fc-8912-4998-baff-60a236fe6cc0"],

Cell[TextData[{
 StyleBox["Behind the design of the raw data streams.", "Subtitle"],
 "\nThe \[OpenCurlyDoubleQuote]data file\[CloseCurlyDoubleQuote] created by \
QtPlatz is an advance file system in the file, which based on the SQLite \
database engine.  The data acquisition core of the QtPlatz handles all \
incoming data streams such as UV/Visible detector, multiple series of \
waveforms from digitizer such as PKD, and AVG waveform from the mass \
spectrometer, and ambient parameter monitor and so forth.   All those data \
should be recorded as a function of time, where time should be treatable to \
UTC international clock.  Except for time series data, all other bitstreams \
are tied to each data source (a.k.a. instrument).   It does not represent \
just a data generator device such as ADC and digitizers, but a specific model \
of the instrument.  For example, infiTOF and AccuTOF plugins are both using \
the same model of the digitizer.  However, the meta-data attached to each \
waveform is different.  The infiTOF control is entirely tied up with HV and \
timing control, so that timing information should be attached to each \
waveform data; however, QtPlatz no such data for AccuTOF.  The new instrument \
to be supported in the future may have a different meta-data.\n\nAs already \
described, a data stream has its own data frame format depend on the \
analytical instrument model.  Every data stream generates by a software \
module called virtual instrument peripheral (VIP), where each of VIP \
represents an instrument, and translate a data frame into a bitstream on the \
time domain.  The data acquisition core of the QtPlatz keeps monitoring all \
data streams paying attention to time-stamps and time event data so-called \
\[OpenCurlyQuote]well-known-event.\[CloseCurlyQuote]  The well-known-event is \
a 32-bit timing data that represents START, STOP, INJECT, WARNING, ERROR, and \
additional instrument-specific states (e.g., DARK measurement in progress).  \
The data acquisition core will store data after the INJECT event into the SQL \
table AcquiredData, and the bitstream is storing into a BLOB column.  The \
bzip algorithm may compress it before write to BLOB.\n\nEach VIP should also \
provide a data translator called \
\[OpenCurlyQuote]DataReader\[CloseCurlyQuote] in a separate loadable module, \
which provides a function to deserialize data in BLOB and construct a known \
data representation of QtPlatz such as MassSpectrum, Chromatogram, and so \
forth.  The concrete DataReader has a unique id (UUID), which records into \
the AcquirdConf table.  The concrete DataReader to be instantiated by using \
the \[OpenCurlyQuote]factory design pattern\[CloseCurlyQuote] when the data \
to be accessed."
}], "Text",
 CellChangeTimes->{{3.793669101623417*^9, 3.793669433069991*^9}, {
   3.7936694823673143`*^9, 3.793669630945306*^9}, 3.793669936244073*^9, {
   3.793669983571548*^9, 3.79367070056425*^9}, {3.793670756052751*^9, 
   3.793670894718007*^9}, {3.793670946168911*^9, 3.793671074398286*^9}, {
   3.7936862461648083`*^9, 3.793686306540979*^9}, {3.793726319963872*^9, 
   3.7937263473873873`*^9}, {3.7937265520126534`*^9, 3.79372692642784*^9}, {
   3.793726976053884*^9, 3.793726989825472*^9}, {3.793727899001123*^9, 
   3.793727954417225*^9}, {3.793728138890456*^9, 3.793728140407755*^9}, {
   3.793728211212574*^9, 3.793728409955309*^9}, {3.793728484783169*^9, 
   3.793728817178253*^9}, {3.793728872100307*^9, 3.7937291464447947`*^9}, {
   3.793729298059688*^9, 3.79372948711096*^9}, {3.793729517455079*^9, 
   3.793729883695154*^9}, {3.793730333238858*^9, 3.793730334638256*^9}, {
   3.7937364185212517`*^9, 3.793736454916587*^9}, 3.793736519486635*^9, {
   3.793736571839633*^9, 3.793736577158078*^9}, {3.7937366347367573`*^9, 
   3.7937366448654346`*^9}, {3.793736733859967*^9, 3.7937367884618883`*^9}, {
   3.7937368549473343`*^9, 
   3.79373698676014*^9}},ExpressionUUID->"eeb7f5cc-b293-4495-81b6-\
a15af5760dac"],

Cell[CellGroupData[{

Cell["Obtaining the DataReader UUID", "Subsubsection",
 CellChangeTimes->{
  3.7937314274527407`*^9},ExpressionUUID->"227fb69f-2104-4391-8b6a-\
2b7c663ee166"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"json", " ", "=", " ", 
   RowBox[{
    RowBox[{"ImportString", "[", 
     RowBox[{
      RowBox[{"adDataReaders", "[", "file", "]"}], ",", " ", 
      "\"\<RawJSON\>\""}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{"json", ",", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"#", ",", "\"\<1.u5303a\>\""}], "]"}], "&"}]}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"avgGuid", " ", "=", " ", 
   RowBox[{
    RowBox[{"Values", "[", "%", "]"}], "[", 
    RowBox[{"[", "3", "]"}], "]"}]}], "        ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "dataReader", " ", "class", " ", "id", " ", "for", " ", "U5303A", " ", 
    "AVG"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{"json", ",", " ", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"#", ",", " ", "\"\<pkd.1.u5303a\>\""}], "]"}], "&"}]}], "]"}],
    "[", 
   RowBox[{"[", "1", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"pkdGuid", " ", "=", 
  RowBox[{
   RowBox[{"Values", "[", "%", "]"}], "[", 
   RowBox[{"[", "3", "]"}], "]"}], "        ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "dataReader", " ", "class", " ", "id", " ", "for", " ", "U5303A", " ", 
    "PKD"}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.793600821644039*^9, 3.793600879707058*^9}, {
   3.79360091913146*^9, 3.7936009328951273`*^9}, {3.793602078096703*^9, 
   3.793602091831059*^9}, 3.793642579819607*^9, {3.7936437716046143`*^9, 
   3.793643772295923*^9}, {3.7936438288268003`*^9, 3.79364385508576*^9}, {
   3.7936445933797073`*^9, 3.793644594157592*^9}, {3.793644968144239*^9, 
   3.7936449685708017`*^9}, {3.7936453384769773`*^9, 3.793645340134543*^9}, {
   3.793649031695404*^9, 3.793649033618765*^9}, {3.79365066751621*^9, 
   3.793650743312705*^9}, {3.793653767418515*^9, 3.793653857196509*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"73f6eeae-c51c-4c4a-946a-c9bd3c4caecc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get record set for a data stream to each DataReader", "Subsubsection",
 CellChangeTimes->{{3.793731520306118*^9, 
  3.7937315916172533`*^9}},ExpressionUUID->"e7a866ab-77f5-4d01-8b17-\
57ceef01bfa3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"conn", " ", "=", " ", 
   RowBox[{"OpenSQLConnection", "[", 
    RowBox[{"JDBC", "[", 
     RowBox[{"\"\<SQLite\>\"", ",", "name"}], "]"}], "]"}]}], ";"}]], "Input",\

 CellLabel->"In[34]:=",ExpressionUUID->"a4ef020b-0c0d-455f-84e2-08e169b4c5db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rows", " ", "=", " ", 
   RowBox[{"SQLExecute", "[", 
    RowBox[{
    "conn", ",", " ", 
     "\"\<SELECT rowid,epoch_time,elapsed_time - (select min(elapsed_time) \
from AcquiredData) FROM AcquiredData WHERE objuuid like 'da16704b%'\>\""}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.793601922621496*^9, 3.793601933461582*^9}, {
  3.7936025982466373`*^9, 3.793602611641987*^9}, {3.7936032829325933`*^9, 
  3.793603318948769*^9}, {3.7936033590115213`*^9, 3.793603385615438*^9}, {
  3.793603427674852*^9, 3.79360344115403*^9}, {3.793603484676491*^9, 
  3.793603486788309*^9}, {3.79360408209443*^9, 3.793604091910198*^9}, {
  3.79361714809274*^9, 3.793617152670768*^9}, {3.7936533024707527`*^9, 
  3.7936533058270807`*^9}, {3.793653362871608*^9, 3.793653487081106*^9}, {
  3.7936535182461443`*^9, 3.7936535210143747`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"6a8803d1-2cb8-4908-92bc-3b0b09cfd89d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Obtain a concrete AccuTOF AVG DataReader, and read through to the end of data\
\
\>", "Subsubsection",
 CellChangeTimes->{{3.7937316311798477`*^9, 3.793731684195114*^9}, {
  3.793731745810424*^9, 
  3.793731818057044*^9}},ExpressionUUID->"f3397724-81c2-428b-8749-\
4bc1e2a94ff1"],

Cell[BoxData[
 RowBox[{"avgReader", " ", "=", " ", 
  RowBox[{"adDataReader", "[", 
   RowBox[{"file", ",", " ", "avgGuid"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.793617648679867*^9, 3.793617709158361*^9}, {
  3.793653679385787*^9, 3.793653687817099*^9}, {3.793653780819373*^9, 
  3.7936537836450357`*^9}, {3.793655734773591*^9, 3.7936557408335333`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"fb2d7310-e90e-41fd-bb25-8adede8a467c"],

Cell[BoxData[
 RowBox[{"Do", " ", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"ms", " ", "=", " ", 
     RowBox[{"adReadSpectrum", "[", 
      RowBox[{"file", ",", " ", "avgReader"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"rowid", " ", "=", " ", 
     RowBox[{"adNext", "[", 
      RowBox[{"file", ",", "avgReader"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{
     "rowid", ",", " ", "\"\<\\t\>\"", "\[IndentingNewLine]", ",", " ", 
      RowBox[{"DateObject", "[", 
       RowBox[{
        RowBox[{"N", "[", 
         RowBox[{
          RowBox[{"i", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "/", "1000000000"}], "]"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"70", "*", "365"}], "+", "17"}], ")"}], "*", "24", "*", 
         "3600"}]}], "]"}], ",", " ", "\"\<\\t\>\"", "\[IndentingNewLine]", 
      ",", " ", 
      RowBox[{"N", "[", 
       RowBox[{
        RowBox[{"i", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "/", "1000000"}], "]"}], ",", " ", 
      "\"\< ms\>\"", "\[IndentingNewLine]", ",", "\"\<\\n\>\"", ",", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"ms", ",", " ", 
        RowBox[{
         RowBox[{"100", " ", "<", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], " ", "<", " ", "100.05"}], " ", 
         "&"}]}], "]"}]}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
   RowBox[{"{", 
    RowBox[{"i", ",", " ", "rows"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7936177345095577`*^9, 3.7936177509401407`*^9}, {
  3.793655717668077*^9, 3.7936557459889803`*^9}, {3.793655911820443*^9, 
  3.7936559368163347`*^9}, {3.7936559785579777`*^9, 3.7936559849680347`*^9}, {
  3.7936560158250427`*^9, 3.7936560238697*^9}, {3.793656131643805*^9, 
  3.7936561638605967`*^9}, {3.793656197314118*^9, 3.793656204007895*^9}, {
  3.793656240855904*^9, 3.793656275726651*^9}, {3.793656399264741*^9, 
  3.793656428952054*^9}, {3.793656518456736*^9, 3.793656623766286*^9}, {
  3.793656825996759*^9, 3.793656830831799*^9}, {3.793659112152649*^9, 
  3.7936591512268887`*^9}, {3.7936593089311934`*^9, 3.79365938104252*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"38b4d7fa-f272-408a-ab34-1946ed766eb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Obtain a concrete AccuTOF PKD DataReader, and read through to the end of data\
\
\>", "Subsubsection",
 CellChangeTimes->{{3.793731712397977*^9, 3.7937317428912573`*^9}, {
  3.793731792210298*^9, 
  3.793731807850067*^9}},ExpressionUUID->"9222381e-0bcf-477e-b0d8-\
7f17eb653560"],

Cell[BoxData[
 RowBox[{"pkdReader", " ", "=", " ", 
  RowBox[{"adDataReader", "[", 
   RowBox[{"file", ",", "pkdGuid"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.793653961626782*^9, 3.793653973554118*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"68743c72-608e-4fd0-8a45-6c8e0f7b91b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rows", " ", "=", " ", 
   RowBox[{"SQLExecute", "[", 
    RowBox[{
    "conn", ",", " ", 
     "\"\<SELECT rowid,epoch_time,elapsed_time - (select min(elapsed_time) \
from AcquiredData) FROM AcquiredData WHERE objuuid like \
'd115620a-be64%'\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.793657011818035*^9, {3.7936570500446243`*^9, 3.7936571021863413`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"41ae5d4a-9db8-438b-ad9f-6c7224087e2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Do", " ", "[", "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{
     RowBox[{"ms", " ", "=", " ", 
      RowBox[{"adReadSpectrum", "[", 
       RowBox[{"file", ",", "pkdReader"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"rowid", " ", "=", " ", 
      RowBox[{"adNext", "[", 
       RowBox[{"file", ",", "pkdReader"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"Print", "[", 
      RowBox[{
      "rowid", ",", " ", "\"\<\\t\>\"", "\[IndentingNewLine]", "\t", ",", " ", 
       RowBox[{"N", "[", 
        RowBox[{
         RowBox[{"i", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "/", "1000000"}], "]"}], ",", " ", 
       "\"\< ms\>\"", "\[IndentingNewLine]", "\t", ",", "\"\<\\n\>\"", ",", 
       " ", 
       RowBox[{"Select", "[", 
        RowBox[{"ms", ",", " ", 
         RowBox[{
          RowBox[{"100", " ", "<", " ", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], " ", "<", " ", "101"}], " ", 
          "&"}]}], "]"}], ",", " ", "\"\<size: \>\"", " ", ",", " ", 
       RowBox[{"Length", "[", "ms", "]"}]}], " ", "]"}]}], 
    "\[IndentingNewLine]", ",", " ", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "rows"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.793653985506933*^9, 3.793653996380643*^9}, {
  3.793655724847864*^9, 3.7936557269221687`*^9}, {3.7936571130829973`*^9, 
  3.793657143776231*^9}, {3.793657204149349*^9, 3.793657221328925*^9}, {
  3.7936591370075693`*^9, 3.7936591533122187`*^9}, {3.793661212652853*^9, 
  3.793661230032797*^9}, {3.7936612622032557`*^9, 3.793661284860634*^9}, {
  3.793662522568943*^9, 3.793662524061164*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"4d74b3f4-1b19-49bd-bdb6-8819fa8dfeb0"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{812, 659},
WindowMargins->{{33, Automatic}, {Automatic, 29}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
TaggingRules->{"TryRealOnly" -> False},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (May 3, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 388, 8, 133, "Title",ExpressionUUID->"80496342-67c5-48a1-99cb-f3242b6e0308"],
Cell[971, 32, 887, 20, 115, "Input",ExpressionUUID->"8047be15-27c5-4339-9b5d-8a721755f01f"],
Cell[1861, 54, 693, 14, 52, "Input",ExpressionUUID->"61f617fc-8912-4998-baff-60a236fe6cc0"],
Cell[2557, 70, 3971, 56, 644, "Text",ExpressionUUID->"eeb7f5cc-b293-4495-81b6-a15af5760dac"],
Cell[CellGroupData[{
Cell[6553, 130, 158, 3, 45, "Subsubsection",ExpressionUUID->"227fb69f-2104-4391-8b6a-2b7c663ee166"],
Cell[6714, 135, 2091, 51, 115, "Input",ExpressionUUID->"73f6eeae-c51c-4c4a-946a-c9bd3c4caecc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8842, 191, 204, 3, 45, "Subsubsection",ExpressionUUID->"e7a866ab-77f5-4d01-8b17-57ceef01bfa3"],
Cell[9049, 196, 281, 7, 30, "Input",ExpressionUUID->"a4ef020b-0c0d-455f-84e2-08e169b4c5db"],
Cell[9333, 205, 945, 17, 94, "Input",ExpressionUUID->"6a8803d1-2cb8-4908-92bc-3b0b09cfd89d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10315, 227, 289, 7, 45, "Subsubsection",ExpressionUUID->"f3397724-81c2-428b-8749-4bc1e2a94ff1"],
Cell[10607, 236, 437, 7, 30, "Input",ExpressionUUID->"fb2d7310-e90e-41fd-bb25-8adede8a467c"],
Cell[11047, 245, 2273, 49, 178, "Input",ExpressionUUID->"38b4d7fa-f272-408a-ab34-1946ed766eb8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13357, 299, 289, 7, 45, "Subsubsection",ExpressionUUID->"9222381e-0bcf-477e-b0d8-7f17eb653560"],
Cell[13649, 308, 284, 5, 30, "Input",ExpressionUUID->"68743c72-608e-4fd0-8a45-6c8e0f7b91b5"],
Cell[13936, 315, 484, 11, 94, "Input",ExpressionUUID->"41ae5d4a-9db8-438b-ad9f-6c7224087e2f"],
Cell[14423, 328, 1813, 40, 199, "Input",ExpressionUUID->"4d74b3f4-1b19-49bd-bdb6-8819fa8dfeb0"]
}, Open  ]]
}, Open  ]]
}
]
*)

