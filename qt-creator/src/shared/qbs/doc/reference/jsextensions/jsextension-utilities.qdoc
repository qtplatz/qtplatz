/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page jsextension-utilities.html
    \ingroup list-of-builtin-services

    \title Utilities Service
    \brief Provides miscellaneous operations.

    The \c Utilities service offers miscellaneous operations.

    \section1 Available Operations

    \section2 cStringQuote

    \badcode
    Utilities.cStringQuote(str: string): string
    \endcode

    Takes a string and escapes special characters in a way that the result is
    suitable for use as a C/C++ string literal. This function is typically used
    to specify values for \l{cpp::defines}{cpp.defines}.

    \section2 getHash

    \badcode
    Utilities.getHash(key: string): string
    \endcode

    Calculates a 16-byte hash of the input and returns it.
    Rules in modules should use this function to find unique locations for output
    artifacts in the build directory without duplicating the whole directory structure of
    the respective input file (to deal with the case of two files with the same name in different
    subdirectories of the same product).

    \section2 rfc1034Identifier

    \badcode
    Utilities.rfc1034Identifier(str: string): string
    \endcode

    Returns an RFC-1034 compliant identifier based on the given string by replacing each character
    that is not Latin alphanumeric or \c{.} with \c{-}.

    \section2 versionCompare

    \badcode
    Utilities.versionCompare(version1: string, version2: string): number
    \endcode

    Interprets the two arguments as version numbers and returns a number that
    is smaller than, equal to, or greater than zero if \c version1 is smaller
    than, equal to, or greater than \c version2, respectively.

    The version strings consist of up to three numbers separated by dots.
*/
