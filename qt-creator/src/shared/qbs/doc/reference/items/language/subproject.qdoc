/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \previouspage Scanner
    \qmltype SubProject
    \inqmlmodule QbsLanguageItems
    \ingroup list-of-items
    \keyword QML.SubProject

    \brief Adds a project from a different file.

    A SubProject item is used to add a sub-project that is defined in
    a separate file. Additionally, properties of the sub-project can
    be set without modifying the separate project file.

    The following example adds a sub-project defined in
    \c{subdir/project.qbs} and overrides its name.

    \code
    Project {
        SubProject {
            filePath: "subdir/project.qbs"
            Properties {
                name: "A sub-project"
            }
        }
        ...
    }
    \endcode

    A typical use case for SubProject items is to conditionally
    include sub-projects. The following example pulls in the \e{tests}
    sub-project if and only if the \c{withTests} property is \c{true}.

    \code
    Project {
        property bool withTests: false
        SubProject {
            filePath: "tests/tests.qbs"
            Properties {
                condition: parent.withTests
            }
        }
        ...
    }
    \endcode

    If you do not need to set any properties on the sub-project, you can also
    use the \l{Project::references}{Project.references} property, the same way
    you would for a product.

    \code
    Project {
        references: "subdir/project.qbs"
    }
    \endcode

    is equivalent with

    \code
    Project {
        SubProject {
            filePath: "subdir/project.qbs"
        }
    }
    \endcode

    It is also possible to nest \l{Project} items directly in the same file.
*/

/*!
    \qmlproperty bool SubProject::condition

    Whether the sub-project is added. If \c false, the sub-project is not
    included.

    Setting this property has the same effect as setting the \c{condition}
    property within a \l{Properties} item. If both this property and the
    \c{condition} property within a \l{Properties} item are defined, the
    sub-project is included only if both properties evaluate to \c{true}.

    \defaultvalue \c true
*/

/*!
    \qmlproperty path SubProject::filePath

    The file path of the project to add as a sub-project. If the top-level item
    in this file is a \l{Product}, it gets wrapped automatically in a new project.

    \defaultvalue empty
*/

/*!
    \qmlproperty bool SubProject::inheritProperties

    Determines whether the sub-project should inherit the properties of the
    surrounding \l{Project}. You can use this feature to share global
    settings between projects and sub-projects.

    \defaultvalue \c true
*/
