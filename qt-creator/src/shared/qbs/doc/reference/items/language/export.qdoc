/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \previouspage Depends
    \nextpage FileTagger
    \qmltype Export
    \inqmlmodule QbsLanguageItems
    \ingroup list-of-items
    \keyword QML.Export

    \brief Exports dependencies and properties to other products.

    An Export item can appear inside a \l{Product} item. It defines a \l{Module}
    with the product's name that can be depended on by other products.
    The properties attached to the Export item will take effect in all products
    that depend on the product inside which the Export item is defined.
    As an example, consider these two products:
    \code
    Product {
        name: "A"
        Export {
            Depends { name: "cpp" }
            cpp.includePaths: exportingProduct.sourceDirectory
            cpp.defines: ["USING_" + exportingProduct.name.toUpperCase()]
        }
    }

    Product {
        name: "B"
        Depends { name: "A" }
    }
    \endcode

    The sources in product B will be able to use headers from product A without specifying
    the full path to them, because the include path has been made known to the compiler via
    A's Export item. Additionally, product B will be compiled with the define \c{USING_A}.

    The dependent \l{Product}'s modules are not exported unless explicitly specified within the
    \l{Export} item:
    \code
    Product {
        name: "B-Exporting-A"
        Depends { name: "A" }
        Export {
            Depends { name: "A" }
        }
    }
    \endcode

    The relationship of the exported dependencies is transitive. A product C depending on a
    product B-Exporting-A will also get a direct dependency on A and thus inherit include
    paths and preprocessor macros exported by A.

    \code
    Product {
        name: "C"
        Depends { name: "B-Exporting-A" }
    }
    \endcode

    Within an Export item, you can use the \c exportingProduct variable to refer to
    the product which defines the Export item. Use the \c{importingProduct} variable
    to refer to the product that pulls in the resulting module:
    \code
    Product {
        name: "D"
        Export {
            Depends { name: "cpp" }
            cpp.includePaths: [exportingProduct.sourceDirectory, importingProduct.buildDirectory]
        }
    }
    \endcode
*/

/*!
    \qmlproperty var Export::prefixMapping

    This property allows to provide a translation of exported values between non-deployed and
    deployed contexts. It is an array of objects with properties \c prefix and \c replacement.
    The array's elements get applied to all other properties set in this item such that if the
    property's value start with \c prefix, that prefix gets replaced with \c replacement.
    It is typically used for C/C++ include paths. For instance, in a library that provides
    header files for inclusion both directly from its source directory (when building it
    as part of a bigger project) and from some installed location (when building an unrelated
    project against it), you would write something like the following:
    \code
    Export {
        Depends { name: "cpp" }
        cpp.includePaths: [exportingProduct.sourceDirectory]
        prefixMapping: [{
                prefix: exportingProduct.sourceDirectory,
                replacement: FileInfo.joinPaths(qbs.installPrefix, "include")
        }]
    }
    \endcode

    \defaultvalue \c undefined
    \see Exporter.qbs
    \see Exporter.pkgconfig
    \since 1.12
*/
