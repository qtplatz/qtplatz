/****************************************************************************
**
** Copyright (C) 2019 Ivan Komissarov (abbapoh@gmail.com)
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmltype BinaryProbe
    \inqmlmodule QbsProbes
    \ingroup list-of-items
    \keyword QML.BinaryProbe
    \inherits PathProbe

    \brief Locates executable files outside the project.

    Finds executable files that have the specified file names.

    BinaryProbe searches for executable files within directories specified by the PATH environment
    variable.

    \note On Unix, also searches in the \c /usr/bin and \c /usr/local/bin directories by default.
    Override \l {PathProbe::platformSearchPaths}{PathProbe.platformSearchPaths} to change this
    behavior.

    \note On Windows, only files that have \e .com, \e .exe, \e .bat, \e .cmd extensions are
    considered \e executables. Override \l {PathProbe::nameSuffixes}{PathProbe.nameSuffixes} to
    change this behavior.

    For example, BinaryProbe can be used to search for a protobuf compiler executable as follows:

    \code
    // Assuming module is called "myproto"
    import qbs.File
    import qbs.Probes

    Module {
        // search for a protoc executable
        Probes.BinaryProbe {
            id: protocProbe
            names: "protoc"
        }
        property string executableFilePath: protocProbe.filePath

        validate: {
            if (!File.exists(executableFilePath))
                throw "The executable '" + executableFilePath + "' does not exist.";
        }

        // use the found executable
        Rule {
            // rule input/outputs here...

            // run executable for the module called "myproto":
            prepare: {
                var args = // initialize arguments...
                var cmd = new Command(input.myproto.executableFilePath, args);
                cmd.highlight = "codegen";
                cmd.description = "generating protobuf files for " + input.fileName;
                return [cmd];
            }
        }
    }
    \endcode
*/
