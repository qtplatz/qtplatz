// This is a -*- C++ -*- header.
//////////////////////////////////////////
// Copyright (C) 2010 Toshinobu Hondo, Ph.D.
// Copyright (C) MS-Cheminformatics LLC / Advanced Instrumentation Project
//
// build setup
// $(ACE_ROOT)\bin\tao_idl -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT) $(InputPath)
//////////////////////////////////////////

module SampleBroker {

	enum SampleType { SAMPLE_UNKNOWN, SAMPLE_STANDARD, SAMPLE_QC };

    typedef sequence< string > stringSequence;

	struct SampleSequenceLine {
		string sampleId_;
		SampleType sampType_;
		short stdLevel_;
        short stdReplicates_;
		string vialNumber_;
		string dataName_;
		string ctrlMethodName_;
		string procMethodName_;
		string sampleDescription_;
		string targetMolecules_;  // either list of formula or list of mol-file
		double injVolume_;
        double methodTime_;
		double istdAmount_;       // added amount of ISTD
        stringSequence userValues_;
	};

	// struct CompoundResponse {
    //     short stdLevel_;
	// 	short stdReplicates_;
	// 	double responce_;       // peak height or area on chromatogram
	// };

    // typedef sequence< CompoundResponse > CompoundResponseSequence;

	// struct CompoundCalibData {
	// 	string compoundName_;  // compund::detection to be unique
    //     string detection_;     // ex UV:250nm, mass:152.1708 etc.
    //     CompoundResponseSequence responses_;
	// };

	// struct CompoundData {
	// 	string compoundName_;  // compund::detection to be unique
    //     string detection_;     // ex UV:250nm, mass:152.1708 etc.
	// 	string formula_;       // optional
	// 	string molstring_;     // more optional
	// 	double retentionTime_;  // required
	// 	boolean isIntStd_;
	// };

    // typedef sequence< CompoundData > CompoundDataSequence;
    // typedef sequence< CompoundCalibData > CompoundCalibDataSequence;

	// struct IDTable {
    //     CompoundDataSequence compounds_;
    //     CompoundCalibDataSequence calibResults_;
	// };

	// struct QuantMethod {
	// 	wstring idtableName_;
    //     short nLevels_;
    //     short nReplicates_;
    //     boolean bracketing_;
	// };

    // typedef sequence< SampleSequenceLine > SampleSequenceLines;

	//struct SampleSequenceData {
    //     stringSequence userColumns_;
    //     SampleSequenceLines lines_;
    //     QuantMethod quantMethod_;
	// 	IDTable idTable_;
    //};

	interface SampleSequence {
        string getSampleSequenceData();
    };

};

